import argparse
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List

from ..datasource.json_provider import load_cpp_data
from ..datasource.import_txt import parse_txt, parse_stations_txt
from ..datasource.import_xml import parse_xml
from ..datasource.import_xml_srzu import parse_cadastre_xml, parse_txt_polygon
from ..graphics.svg_generator import SVGConfig
from .html_graphics_pipeline import process_real_data_to_html


def _config_from_args(args: argparse.Namespace) -> SVGConfig:
    cfg = SVGConfig()
    # –§–æ—Ä–º–∞—Ç –ª–∏—Å—Ç–∞
    fmt = (args.format or "A4").upper()
    if fmt == "A3":
        cfg.page_width_mm = 297.0
        cfg.page_height_mm = 420.0
    else:
        cfg.page_width_mm = 210.0
        cfg.page_height_mm = 297.0
    # DPI
    if args.dpi:
        cfg.dpi = int(args.dpi)
    return cfg


def _load_data(args: argparse.Namespace):
    if args.json:
        return load_cpp_data(Path(args.json))
    if args.txt:
        return parse_txt(Path(args.txt))
    if args.xml:
        return parse_xml(Path(args.xml))
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (--json | --txt | --xml)")


def main(argv: List[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description="II4KI Graphics HTML/SVG-first ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–∏—Å—Ç–æ–≤")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--json", help="–ü—É—Ç—å –∫ cpp JSON (contract)")
    group.add_argument("--txt", help="–ü—É—Ç—å –∫ TXT –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–¥–µ–º–æ)")
    group.add_argument("--xml", help="–ü—É—Ç—å –∫ XML (–¥–µ–º–æ)")
    parser.add_argument("--srzu-xml", help="–ü—É—Ç—å –∫ XML –≤—ã–ø–∏—Å–∫–µ –ö–ü–¢ –¥–ª—è SRZU", dest="srzu_xml")
    parser.add_argument("--srzu-txt", help="–ü—É—Ç—å –∫ TXT —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –ó–£ –¥–ª—è SRZU", dest="srzu_txt")
    parser.add_argument("--stations-txt", help="–ü—É—Ç—å –∫ TXT —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—É–Ω–∫—Ç–æ–≤ –û–ú–° –¥–ª—è SGP", dest="stations_txt")
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ `out/`
    default_out = Path(__file__).resolve().parents[3] / "out"
    parser.add_argument("--out", required=False, default=str(default_out), help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <project>/out)")
    parser.add_argument("--format", choices=["A3", "A4"], default="A4", help="–§–æ—Ä–º–∞—Ç –ª–∏—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é A4)")
    parser.add_argument("--dpi", type=int, default=96, help="DPI –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –º–º‚Üípx (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 96)")
    parser.add_argument("--sheets", nargs="*", choices=["SRZU", "SGP", "CH"], help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏")
    args = parser.parse_args(argv)

    out_dir = Path(args.out)
    out_dir.mkdir(parents=True, exist_ok=True)

    cpp_data = _load_data(args)
    # –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ SRZU‚ÄëXML ‚Äî –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ SRZU –≤ –æ–±—â–∏–π –ø–∞–∫–µ—Ç
    if args.srzu_xml:
        try:
            srzu_data = parse_cadastre_xml(Path(args.srzu_xml))
            # –ï—Å–ª–∏ –µ—Å—Ç—å TXT —Å —Ü–µ–ª–µ–≤—ã–º —É—á–∞—Å—Ç–∫–æ–º ‚Äî –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º –∫–∞–∫ target_parcels
            if args.srzu_txt:
                coords = parse_txt_polygon(Path(args.srzu_txt))
                if coords:
                    srzu_data.setdefault('target_parcels', []).append({
                        'type': 'Polygon',
                        'coordinates': [coords],
                        'properties': {'status': 'NEW', 'designation': ':–ó–£'}
                    })
            cpp_data['srzu'] = srzu_data
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å SRZU XML: {e}")
    cfg = _config_from_args(args)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è SGP, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
    if args.stations_txt:
        try:
            stations = parse_stations_txt(Path(args.stations_txt))
            print(f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stations)} —Å—Ç–∞–Ω—Ü–∏–π –û–ú–°")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –≤ cpp_data
            if 'entities' not in cpp_data:
                cpp_data['entities'] = {}
            cpp_data['entities']['stations'] = stations
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏: {e}")

    # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã; —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ --sheets –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
    html_files = process_real_data_to_html(cpp_data, out_dir, config=cfg)

    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    for k, v in html_files.items():
        print(f"  {k}: {v}")
    manifest = out_dir / "manifest.json"
    if manifest.exists():
        print(f"–ú–∞–Ω–∏—Ñ–µ—Å—Ç: {manifest}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    _update_project_summary(out_dir, html_files)
    
    return 0


def _update_project_summary(out_dir: Path, html_files: Dict[str, Path]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–∑ public/templates
        template_path = Path(__file__).resolve().parents[3] / "public" / "templates" / "project_summary.html"
        summary_path = out_dir / "project_summary.html"
        
        if template_path.exists():
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            import shutil
            shutil.copy2(template_path, summary_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
            with open(summary_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            from datetime import datetime
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            content = content.replace(
                '<title>–ú–µ–∂–µ–≤–æ–π –ø–ª–∞–Ω ‚Äî —Å–≤–æ–¥–∫–∞</title>',
                f'<title>–ú–µ–∂–µ–≤–æ–π –ø–ª–∞–Ω ‚Äî —Å–≤–æ–¥–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp})</title>'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ CH —Å—Ç—Ä–∞–Ω–∏—Ü
            ch_pages = [k for k in html_files.keys() if k.startswith('CH_p')]
            ch_pages_list = [html_files[ch_page].name for ch_page in sorted(ch_pages)]
            ch_script = f"window.__CH_LIST__ = {ch_pages_list};"
            content = content.replace(
                'let chPages = Array.isArray(window.__CH_LIST__) ? window.__CH_LIST__ : null;',
                f'{ch_script}\n      let chPages = Array.isArray(window.__CH_LIST__) ? window.__CH_LIST__ : null;'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            with open(summary_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"üìã –°–≤–æ–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {summary_path}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            _open_browser(summary_path)
            
        else:
            print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω —Å–≤–æ–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")


def _open_browser(file_path: Path):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    try:
        import webbrowser
        import sys
        import platform
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –≤ URL
        if platform.system() == "Windows":
            url = f"file:///{file_path.as_posix()}"
        else:
            url = f"file://{file_path.absolute()}"
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        webbrowser.open(url)
        print(f"üåê –°–≤–æ–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
        print(f"üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {file_path}")


if __name__ == "__main__":
    raise SystemExit(main())


