"""
–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML-–ª–∏—Å—Ç–æ–≤ –º–µ–∂–µ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —Å SVG-–≥—Ä–∞—Ñ–∏–∫–æ–π
"""

import json
import shutil
from pathlib import Path
from typing import Dict, Any, List

from ..graphics.svg_generator import SVGGraphicsGenerator, SVGConfig, generate_legend_for_data
from ..exporters.html_publisher import generate_html_sheet
from ..datasource.json_provider import load_cpp_data
from ..graphics.labels import ParcelLabelFormatter, validate_label
from ..core.enums import OperationType
from ..layout.srzu_renderer import render_srzu


def process_real_data_to_html(cpp_data: Dict[str, Any], 
                            output_dir: Path,
                            config: SVGConfig = None) -> Dict[str, Path]:
    """
    –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ HTML-–ª–∏—Å—Ç—ã
    
    Args:
        cpp_data: CPP-–¥–∞–Ω–Ω—ã–µ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã real_data_ingestor)
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SVG
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º HTML-—Ñ–∞–π–ª–∞–º
    """
    if not cpp_data:
        raise ValueError("CPP-–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SVG-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    svg_config = config or SVGConfig(width=800, height=600)
    
    # –≠—Ç–∞–ø 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ real_data_ingestor)
    print("‚úì –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    
    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏/–≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–∫ –ó–£ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
    _apply_operation_labels(cpp_data)

    # –≠—Ç–∞–ø 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG-–≥—Ä–∞—Ñ–∏–∫–∏ –∏ HTML-–ª–∏—Å—Ç–æ–≤
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG-–≥—Ä–∞—Ñ–∏–∫–∏...")
    svg_generator = SVGGraphicsGenerator(svg_config)
    
    html_files = {}
    manifest = {"SRZU": "SRZU.html", "SGP": "SGP.html", "CH": []}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    sections = ["SRZU", "SGP", "CH"]
    section_titles = {
        "SRZU": "–°—Ö–µ–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤",
        "SGP": "–°—Ö–µ–º–∞ –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–π", 
        "CH": "–ß–µ—Ä—Ç–µ–∂ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∏ –∏—Ö —á–∞—Å—Ç–µ–π"
    }
    
    for section in sections:
        print(f"  üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {section_titles[section]}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG-–≥—Ä–∞—Ñ–∏–∫—É
        if section == "CH":
            # –†–∞–∑–±–∏–µ–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            svg_pages = svg_generator.generate_drawings_paginated(cpp_data)
            # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ CH_pN.html
            for i, svg_content in enumerate(svg_pages, start=1):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ª–µ–≥–µ–Ω–¥—É –∏–∑ used_legend_tokens
                from ..graphics.labels import LegendBuilder
                if hasattr(svg_generator, 'used_legend_tokens') and svg_generator.used_legend_tokens:
                    legend_items = LegendBuilder.build(svg_generator.used_legend_tokens)
                else:
                    legend_items = generate_legend_for_data(cpp_data)
                
                scale = cpp_data.get('scales_allowed', [500])[0]
                scale_text = f"–ú–∞—Å—à—Ç–∞–± 1:{scale}"
                html_file = output_dir / f"CH_p{i}.html"
                generate_html_sheet(
                    drawing_svg=svg_content,
                    legend_items=legend_items,
                    title=section_titles[section],
                    scale=scale_text,
                    output_path=html_file
                )
                html_files[f"CH_p{i}"] = html_file
                manifest["CH"].append(html_file.name)
            continue
        else:
            generator_section = {
                "SRZU": "SCHEME",
                "SGP": "SGP",
            }[section]
            if section == "SRZU" and isinstance(cpp_data.get('srzu'), dict):
                svg_result = render_srzu(cpp_data['srzu'], svg_config)
                if isinstance(svg_result, tuple):
                    svg_content, used_tokens = svg_result
                    # –ü–æ—Ä—è–¥–æ–∫ SRZU-–ª–µ–≥–µ–Ω–¥—ã
                    order = ["target", "adjacent", "quarters", "admin", "zone", "label-quarter", "label-parcel", "boundary-existing", "boundary-new", "boundary-uncertain"]
                    # –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ used_tokens
                    ordered_tokens = [t for t in order if t in used_tokens]
                    from ..graphics.labels import LegendBuilder
                    legend_items = LegendBuilder.build(set(ordered_tokens))
                else:
                    svg_content = svg_result
                    legend_items = generate_legend_for_data(cpp_data)
            else:
                svg_content = svg_generator.generate_complete_svg(cpp_data, generator_section)
                # –î–ª—è SGP —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ª–µ–≥–µ–Ω–¥—ã
                from ..graphics.labels import LegendBuilder
                if hasattr(svg_generator, 'used_legend_tokens') and svg_generator.used_legend_tokens:
                    legend_items = LegendBuilder.build(svg_generator.used_legend_tokens)
                else:
                    legend_items = generate_legend_for_data(cpp_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ LegendBuilder)
        # legend_items = generate_legend_for_data(cpp_data) # This line is now redundant as legend_items is set above
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—à—Ç–∞–± (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
        # –î–ª—è SRZU –∏ SGP –º–∞—Å—à—Ç–∞–± –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º –≤ —à–∞–ø–∫–µ ‚Äî —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
        scale_text = "" if section in ("SRZU", "SGP") else f"–ú–∞—Å—à—Ç–∞–± 1:{cpp_data.get('scales_allowed', [500])[0]}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–ª–∏—Å—Ç
        # –ï–¥–∏–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É Rule 1.2
        html_file = output_dir / f"{section}.html"
        generate_html_sheet(
            drawing_svg=svg_content,
            legend_items=legend_items,
            title=section_titles[section],
            scale=scale_text,
            output_path=html_file
        )
        
        html_files[section] = html_file
        print(f"    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {html_file}")
        if section in ("SRZU", "SGP"):
            manifest[section] = html_file.name
    
    # –ü–∏—à–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç —Ä—è–¥–æ–º —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    manifest_path = output_dir / "manifest.json"
    with open(manifest_path, 'w', encoding='utf-8') as mf:
        json.dump(manifest, mf, ensure_ascii=False, indent=2)
    
    # –ö–æ–ø–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º
    _copy_css_files(output_dir)
    
    return html_files


def _copy_css_files(output_dir: Path):
    """–ö–æ–ø–∏—Ä—É–µ—Ç CSS —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É out –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º."""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É css –≤ out
        css_dir = output_dir / "css"
        css_dir.mkdir(exist_ok=True)
        
        # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É CSS —Ñ–∞–π–ª—É
        source_css = Path(__file__).resolve().parents[3] / "public" / "css" / "sheets.css"
        
        if source_css.exists():
            # –ö–æ–ø–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª
            shutil.copy2(source_css, css_dir / "sheets.css")
            print(f"üìÅ CSS —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {css_dir / 'sheets.css'}")
        else:
            print(f"‚ö†Ô∏è CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_css}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è CSS: {e}")


def _apply_operation_labels(cpp_data: Dict[str, Any]) -> None:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–∫–∏ –ó–£ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ (¬ß78‚Äì79).
    
    –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —É—á–∞—Å—Ç–∫–∞:
    
    I. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ó–£:
       - –ï—Å–ª–∏ –æ–¥–Ω–∞ XML –≤—ã–ø–∏—Å–∫–∞ ‚Üí –ó–£ —É—á—Ç–µ–Ω–Ω—ã–π (–£—Ç–æ—á–Ω–µ–Ω–∏–µ/–†–∞–∑–¥–µ–ª)
       - –ï—Å–ª–∏ –¥–≤–µ –∏ –±–æ–ª–µ–µ XML –≤—ã–ø–∏—Å–æ–∫ ‚Üí –ó–£ —É—á—Ç–µ–Ω–Ω—ã–µ (–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ/–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
       - –ï—Å–ª–∏ –Ω–µ—Ç XML –≤—ã–ø–∏—Å–æ–∫ ‚Üí –ó–£ –≤–Ω–æ–≤—å –æ–±—Ä–∞–∑—É–µ–º—ã–π
    
    II. –ü—Ä–∞–≤–∏–ª–∞ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π:
       1. –£—Ç–æ—á–Ω–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü (–æ–¥–∏–Ω —É—á—Ç–µ–Ω–Ω—ã–π –ó–£) ‚Üí :28 (–ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –ö–ù)
       2. –†–∞–∑–¥–µ–ª/–í—ã–¥–µ–ª (–∏–∑ –æ–¥–Ω–æ–≥–æ –ó–£) ‚Üí :123:–ó–£1, :123:–ó–£2
       3. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ/–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–¥–≤–∞ –∏ –±–æ–ª–µ–µ –ó–£) ‚Üí :–ó–£1, :–ó–£2 (–±–µ–∑ –∫–≤–∞—Ä—Ç–∞–ª–∞)
       4. –ß–∞—Å—Ç–∏ –ó–£ ‚Üí :123/5, :123/—á–∑—É1, :123:–ó–£1/—á–∑—É1, :–ó–£1/—á–∑—É1
    """
    entities = cpp_data.get('entities', {})
    parcels = entities.get('parcels', []) or []
    if not parcels:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XML –≤—ã–ø–∏—Å–æ–∫ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏
    has_parcel_xml = cpp_data.get('has_parcel_xml', False)
    parcel_xml_count = cpp_data.get('parcel_xml_count', 0)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    def last_block_from_cadastral(p: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –ö–ù (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ 04:11:010120:28 ‚Üí 28)"""
        cad = p.get('cadastral_number') or ''
        if cad and ':' in cad:
            return cad.split(':')[-1]
        return cad

    op = cpp_data.get('operation') or 'CLARIFY'
    op = str(op).upper()
    counter_new = 0
    counter_parts = 0
    
    for p in parcels:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è –º–µ—Ç–∫–∞ designation ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        label = p.get('designation') or ''
        if label and any(validate_label(label, kind) for kind in (
            'clarify','split','merge','part_existing','part_new_changed','part_new_split','part_new_merge'
        )):
            continue
        
        # –ï—Å–ª–∏ designation –ø—É—Å—Ç–æ–µ - –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if op == 'CLARIFY':
            # –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å XML - —É—á—Ç–µ–Ω–Ω—ã–π –ó–£ (:28), –∏–Ω–∞—á–µ - –≤–Ω–æ–≤—å –æ–±—Ä–∞–∑—É–µ–º—ã–π (:–ó–£1)
            if has_parcel_xml:
                last_block = last_block_from_cadastral(p) or '–ó–£'
                p['designation'] = ParcelLabelFormatter.base_label_for_clarify(last_block)
            else:
                counter_new += 1
                p['designation'] = ParcelLabelFormatter.new_label_for_merge(counter_new)
            
        elif op in ('SPLIT', 'ALLOT'):
            # –†–∞–∑–¥–µ–ª/–í—ã–¥–µ–ª (–∏–∑ –æ–¥–Ω–æ–≥–æ –ó–£) ‚Üí :123:–ó–£1, :123:–ó–£2
            # –¢—Ä–µ–±—É–µ—Ç –æ–¥–Ω—É XML –≤—ã–ø–∏—Å–∫—É
            if parcel_xml_count == 1:
                counter_new += 1
                quartal = last_block_from_cadastral(p) or '0'
                p['designation'] = ParcelLabelFormatter.new_label_for_split(quartal, counter_new)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç XML - –≤–Ω–æ–≤—å –æ–±—Ä–∞–∑—É–µ–º—ã–π
                counter_new += 1
                p['designation'] = ParcelLabelFormatter.new_label_for_merge(counter_new)
            
        elif op in ('MERGE', 'REDISTRIBUTE'):
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ/–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–¥–≤–∞ –∏ –±–æ–ª–µ–µ –ó–£) ‚Üí :–ó–£1, :–ó–£2
            # –¢—Ä–µ–±—É–µ—Ç –¥–≤–µ –∏ –±–æ–ª–µ–µ XML –≤—ã–ø–∏—Å–æ–∫ (–∏–ª–∏ –Ω–æ–ª—å - —Ç–æ–∂–µ –≤–Ω–æ–≤—å –æ–±—Ä–∞–∑—É–µ–º—ã–π)
            counter_new += 1
            p['designation'] = ParcelLabelFormatter.new_label_for_merge(counter_new)
            
        elif op == 'PARTS':
            # –ß–∞—Å—Ç–∏ –ó–£ ‚Üí :123/—á–∑—É1
            counter_parts += 1
            quartal = last_block_from_cadastral(p) or '0'
            p['designation'] = ParcelLabelFormatter.part_new_on_changed(quartal, counter_parts)
            
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–Ω–æ–≤—å –æ–±—Ä–∞–∑—É–µ–º–æ–≥–æ ‚Üí :–ó–£1
            if has_parcel_xml:
                last_block = last_block_from_cadastral(p) or '–ó–£'
                p['designation'] = ParcelLabelFormatter.base_label_for_clarify(last_block)
            else:
                counter_new += 1
                p['designation'] = ParcelLabelFormatter.new_label_for_merge(counter_new)


def create_project_summary_html(cpp_data: Dict[str, Any], 
                              html_files: Dict[str, Path],
                              output_dir: Path) -> Path:
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π HTML-—Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    
    project_info = cpp_data.get('project', {})
    entities = cpp_data.get('entities', {})
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        'parcels': len(entities.get('parcels', [])),
        'boundary_points': len(entities.get('boundary_points', [])),
        'stations': len(entities.get('stations', [])),
        'directions': len(entities.get('directions', []))
    }
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
    srzu_content = ""
    sgp_content = ""
    ch_content = ""
    
    # –ß–∏—Ç–∞–µ–º SRZU
    if html_files.get('SRZU'):
        try:
            with open(html_files['SRZU'], 'r', encoding='utf-8') as f:
                srzu_html = f.read()
                srzu_start = srzu_html.find('<section class="sheet"')
                srzu_end = srzu_html.find('</section>') + len('</section>')
                if srzu_start != -1 and srzu_end != -1:
                    srzu_content = srzu_html[srzu_start:srzu_end]
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SRZU —Ñ–∞–π–ª–∞: {e}")
    
    # –ß–∏—Ç–∞–µ–º SGP
    if html_files.get('SGP'):
        try:
            with open(html_files['SGP'], 'r', encoding='utf-8') as f:
                sgp_html = f.read()
                sgp_start = sgp_html.find('<section class="sheet"')
                sgp_end = sgp_html.find('</section>') + len('</section>')
                if sgp_start != -1 and sgp_end != -1:
                    sgp_content = sgp_html[sgp_start:sgp_end]
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SGP —Ñ–∞–π–ª–∞: {e}")
    
    # –ß–∏—Ç–∞–µ–º CH (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    ch_pages = [k for k in html_files.keys() if k.startswith('CH_p')]
    if ch_pages:
        try:
            first_ch = sorted(ch_pages)[0]
            with open(html_files[first_ch], 'r', encoding='utf-8') as f:
                ch_html = f.read()
                ch_start = ch_html.find('<section class="sheet"')
                ch_end = ch_html.find('</section>') + len('</section>')
                if ch_start != -1 and ch_end != -1:
                    ch_content = ch_html[ch_start:ch_end]
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CH —Ñ–∞–π–ª–∞: {e}")
    
    # –°–æ–∑–¥–∞–µ–º HTML-—Å–≤–æ–¥–∫—É —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ç–∞–±–æ–≤
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>–ú–µ–∂–µ–≤–æ–π –ø–ª–∞–Ω - –°–≤–æ–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</title>
    <link rel="stylesheet" href="css/sheets.css" />
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }}
        .header {{ background: #f4f4f4; padding: 20px; border-radius: 5px; margin-bottom: 20px; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }}
        .stat-card {{ background: #e8f4fd; padding: 15px; border-radius: 5px; text-align: center; }}
        .stat-number {{ font-size: 2em; font-weight: bold; color: #0077cc; }}
        .stat-label {{ color: #666; }}
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–æ–≤ */
        .tabs-container {{ margin: 30px 0; }}
        .tabs-nav {{ display: flex; border-bottom: 2px solid #ddd; margin-bottom: 20px; }}
        .tab-button {{ 
            background: #f8f9fa; 
            border: none; 
            padding: 12px 24px; 
            cursor: pointer; 
            font-size: 16px; 
            border-radius: 8px 8px 0 0; 
            margin-right: 4px;
            transition: all 0.3s ease;
        }}
        .tab-button:hover {{ background: #e9ecef; }}
        .tab-button.active {{ 
            background: #0077cc; 
            color: white; 
            font-weight: bold;
        }}
        .tab-content {{ 
            display: none; 
            padding: 20px; 
            border: 1px solid #ddd; 
            border-radius: 0 8px 8px 8px; 
            background: white;
            min-height: 600px;
        }}
        .tab-content.active {{ display: block; }}
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ */
        .embedded-scheme {{ 
            margin: 15px 0; 
            border: 1px solid #ccc; 
            border-radius: 5px; 
            overflow: hidden; 
            background: white;
        }}
        .embedded-scheme .sheet {{ margin: 0; }}
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
        .ch-pages {{ margin: 20px 0; }}
        .ch-page {{ 
            margin: 10px 0; 
            padding: 10px; 
            border: 1px solid #eee; 
            border-radius: 3px; 
            background: #f8f9fa;
        }}
        .ch-page a {{ 
            color: #0077cc; 
            text-decoration: none; 
            font-weight: bold; 
        }}
        .ch-page a:hover {{ text-decoration: underline; }}
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */
        .tech-info {{ 
            background: #f8f9fa; 
            padding: 20px; 
            border-radius: 5px; 
            margin-top: 30px; 
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>–ú–µ–∂–µ–≤–æ–π –ø–ª–∞–Ω - –°–≤–æ–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</h1>
        <h2>{project_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')}</h2>
        <p><strong>ID –ø—Ä–æ–µ–∫—Ç–∞:</strong> {project_info.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
        <p><strong>–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> {Path().cwd().stat().st_mtime if Path().exists() else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
    </div>
    
    <div class="stats">
        <div class="stat-card">
            <div class="stat-number">{stats['parcels']}</div>
            <div class="stat-label">–£—á–∞—Å—Ç–∫–æ–≤</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{stats['boundary_points']}</div>
            <div class="stat-label">–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{stats['stations']}</div>
            <div class="stat-label">–ü—É–Ω–∫—Ç–æ–≤ –û–ú–°</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">{stats['directions']}</div>
            <div class="stat-label">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π</div>
        </div>
    </div>
    
    <!-- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–∞–±–∞–º–∏ –¥–ª—è —Å—Ö–µ–º -->
    <div class="tabs-container">
        <div class="tabs-nav">
            <button class="tab-button active" onclick="showTab('srzu')">üìã SRZU</button>
            <button class="tab-button" onclick="showTab('sgp')">üìê SGP</button>
            <button class="tab-button" onclick="showTab('ch')">üé® CH</button>
        </div>
        
        <!-- –¢–∞–± SRZU -->
        <div id="srzu" class="tab-content active">
            <h3>–°—Ö–µ–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ (SRZU)</h3>
            <p>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π –ó–£ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–º–µ–∂–Ω–∏–∫–æ–≤ –∏ –∫–≤–∞—Ä—Ç–∞–ª–∞ —Å –±—É—Ñ–µ—Ä–Ω–æ–π –∑–æ–Ω–æ–π 200–º.</p>
            <div class="embedded-scheme">
                {srzu_content if srzu_content else '<p>–°—Ö–µ–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞</p>'}
            </div>
        </div>
        
        <!-- –¢–∞–± SGP -->
        <div id="sgp" class="tab-content">
            <h3>–°—Ö–µ–º–∞ –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–π (SGP)</h3>
            <p>–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç—É—Ä –æ–±—ä–µ–∫—Ç–∞ –ö–†, –ø—É–Ω–∫—Ç—ã –ì–ì–°/–°–ü–û, —Ç–æ—á–∫–∏ –°–ì–û, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.</p>
            <div class="embedded-scheme">
                {sgp_content if sgp_content else '<p>–°—Ö–µ–º–∞ –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞</p>'}
            </div>
        </div>
        
        <!-- –¢–∞–± CH -->
        <div id="ch" class="tab-content">
            <h3>–ß–µ—Ä—Ç–µ–∂ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∏ –∏—Ö —á–∞—Å—Ç–µ–π (CH)</h3>
            <p>–î–µ—Ç–∞–ª—å–Ω—ã–π —á–µ—Ä—Ç–µ–∂ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏, –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ø. 78-79 –ø—Ä–∞–≤–∏–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.</p>
            <div class="embedded-scheme">
                {ch_content if ch_content else '<p>–ß–µ—Ä—Ç–µ–∂ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</p>'}
            </div>
            
            <!-- –°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä—Ç–µ–∂–∞ -->
            <div class="ch-pages">
                <h4>–í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä—Ç–µ–∂–∞:</h4>
                {''.join([f'<div class="ch-page"><a href="{html_files[ch_page].name}" target="_blank">–°—Ç—Ä–∞–Ω–∏—Ü–∞ {ch_page.replace("CH_p", "")}</a></div>' for ch_page in sorted(ch_pages)])}
            </div>
        </div>
    </div>
    
    <!-- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
    <div class="tech-info">
        <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <p><strong>–°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:</strong> {cpp_data.get('crs', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</p>
        <p><strong>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:</strong> {cpp_data.get('crs', {}).get('unit', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}</p>
        <p><strong>–î–æ–ø—É—Å—Ç–∏–º—ã–µ –º–∞—Å—à—Ç–∞–±—ã:</strong> 1:{', 1:'.join(map(str, cpp_data.get('scales_allowed', [])))}</p>
    </div>
    
    <script>
        function showTab(tabName) {{
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
            const tabs = document.querySelectorAll('.tab-content');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            const buttons = document.querySelectorAll('.tab-button');
            buttons.forEach(button => button.classList.remove('active'));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
            document.getElementById(tabName).classList.add('active');
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
            event.target.classList.add('active');
        }}
    </script>
</body>
</html>
"""
    
    summary_file = output_dir / "project_summary.html"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return summary_file


def run_full_pipeline_on_real_data(test_data_dir: Path, 
                                 output_dir: Path = None) -> Dict[str, Path]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        test_data_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: test_data_dir.parent / "html_results")
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    """
    if output_dir is None:
        output_dir = test_data_dir.parent / "html_results"
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print(f"üìÅ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data_dir}")
    print(f"üìÅ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {output_dir}")
    
    try:
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ cpp_data –∏–∑ JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        print("\nüìä –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ cpp_data –∏–∑ JSON...")
        data_file = test_data_dir / "real_data_cpp.json"
        cpp_data = load_cpp_data(data_file)
        
        if not cpp_data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cpp_data.get('entities', {}).get('parcels', []))} —É—á–∞—Å—Ç–∫–æ–≤")
        print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cpp_data.get('entities', {}).get('boundary_points', []))} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫")
        print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cpp_data.get('entities', {}).get('stations', []))} –ø—É–Ω–∫—Ç–æ–≤ –û–ú–°")
        
        # –≠—Ç–∞–ø 2: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ HTML
        print("\nüé® –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–ª–∏—Å—Ç–æ–≤...")
        html_files = process_real_data_to_html(cpp_data, output_dir)
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        print("\nüìã –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
        summary_file = create_project_summary_html(cpp_data, html_files, output_dir)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º CPP-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        cpp_file = output_dir / "processed_cpp_data.json"
        with open(cpp_file, 'w', encoding='utf-8') as f:
            json.dump(cpp_data, f, ensure_ascii=False, indent=2)
        
        result_files = {
            'summary': summary_file,
            'cpp_data': cpp_file,
            **html_files
        }
        
        print(f"\nüéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
        print(f"üìÑ –°–≤–æ–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {summary_file}")
        
        for section, html_file in html_files.items():
            print(f"üìÑ {section}: {html_file}")
        
        return result_files
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_data_dir = Path(__file__).parent.parent.parent.parent.parent / "docs" / "–ú–ü" / "test"
    
    if test_data_dir.exists():
        try:
            result_files = run_full_pipeline_on_real_data(test_data_dir)
            print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã:")
            for name, path in result_files.items():
                print(f"  {name}: {path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_data_dir}")
