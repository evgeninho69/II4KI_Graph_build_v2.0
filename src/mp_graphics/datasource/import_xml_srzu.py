from __future__ import annotations

from pathlib import Path
from typing import Dict, Any, List
from xml.etree import ElementTree as ET

from .json_contract import SRZUData, Geometry
try:
    from shapely.geometry import Polygon, MultiPolygon
    from shapely.ops import unary_union
except Exception:
    Polygon = None  # type: ignore
    MultiPolygon = None  # type: ignore
    unary_union = None  # type: ignore


def _coords_from_ordinates(ord_el) -> List[List[float]]:
    coords: List[List[float]] = []
    for o in ord_el.findall('ordinate'):
        try:
            x = float((o.findtext('x') or '').replace(',', '.'))
            y = float((o.findtext('y') or '').replace(',', '.'))
        except Exception:
            continue
        coords.append([x, y])
    return coords


def _polygon_centroid(coords: List[List[float]]) -> tuple[float, float]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –ø–æ–ª–∏–≥–æ–Ω–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    if not coords:
        return 0.0, 0.0
    area = 0.0
    cx = 0.0
    cy = 0.0
    pts = coords[:]
    if pts[0] != pts[-1]:
        pts = pts + [pts[0]]
    for i in range(len(pts) - 1):
        x0, y0 = pts[i]
        x1, y1 = pts[i + 1]
        cross = x0 * y1 - x1 * y0
        area += cross
        cx += (x0 + x1) * cross
        cy += (y0 + y1) * cross
    area = area * 0.5
    if abs(area) < 1e-9:
        # fallback ‚Äî —Å—Ä–µ–¥–Ω–µ–µ
        sx = sum(p[0] for p in coords) / len(coords)
        sy = sum(p[1] for p in coords) / len(coords)
        return sx, sy
    cx = cx / (6.0 * area)
    cy = cy / (6.0 * area)
    return cx, cy

def _polygon_from_spatial(elem) -> List[List[float]]:
    # –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É .../entity_spatial/spatials_elements/spatial_element/ordinates/ordinate
    ords = elem.find('./entity_spatial/spatials_elements/spatial_element/ordinates')
    if ords is None:
        return []
    coords = _coords_from_ordinates(ords)
    if coords and coords[0] != coords[-1]:
        coords.append(coords[0])
    return coords


def _extract_quarter_coords_from_block(root: ET.Element) -> List[List[float]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä–∞–Ω–∏—Ü—ã –∫–≤–∞—Ä—Ç–∞–ª–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ —Å–µ–∫—Ü–∏–∏ cadastral_block/spatial_data.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [x, y] –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
    """
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: spatial_data - —ç—Ç–æ –≥—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞
    candidate_paths = [
        './cadastral_blocks/cadastral_block/spatial_data/entity_spatial/spatials_elements/spatial_element/ordinates',
        './cadastral_blocks/cadastral_block/spatial_data//ordinates',
        './cadastral_blocks/cadastral_block/entity_spatial/spatials_elements/spatial_element/ordinates',
        './cadastral_blocks/cadastral_block/contours/contour/entity_spatial/spatials_elements/spatial_element/ordinates',
        './cadastral_blocks/cadastral_block/contours_location/contours/contour/entity_spatial/spatials_elements/spatial_element/ordinates',
        './cadastral_blocks/cadastral_block/boundary/contour/entity_spatial/spatials_elements/spatial_element/ordinates',
    ]
    for path in candidate_paths:
        ords = root.find(path)
        if ords is None:
            continue
        coords = _coords_from_ordinates(ords)
        if coords:
            if coords[0] != coords[-1]:
                coords.append(coords[0])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä–∞–Ω–∏—Ü—ã –∫–≤–∞—Ä—Ç–∞–ª–∞ –≤ XML: {len(coords)} —Ç–æ—á–µ–∫ (–ø—É—Ç—å: {path})")
            return coords
    return []

def _add_rectangular_quarter(parcels_coords: List[List[List[float]]], quarters: List[Geometry], quarter_num: str | None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —ç–∫—Å—Ç–µ–Ω—Ç –∫–≤–∞—Ä—Ç–∞–ª–∞ –∫–∞–∫ fallback —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º"""
    xs = [x for poly in parcels_coords for x, _ in poly]
    ys = [y for poly in parcels_coords for _, y in poly]
    min_x, max_x = min(xs), max(xs)
    min_y, max_y = min(ys), max(ys)
    quarters.append({
        "type": "LineString",
        "coordinates": [[min_x, max_y], [max_x, max_y], [max_x, min_y], [min_x, min_y], [min_x, max_y]],
        "properties": {
            "color": "#1E5AFF",  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
            "stroke-width": "0.3mm",  # –¢–æ–ª—â–∏–Ω–∞ 0.3–º–º —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
            "quarter_number": quarter_num or "unknown",
            "type": "rectangular_extent"
        }
    })
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —ç–∫—Å—Ç–µ–Ω—Ç –∫–≤–∞—Ä—Ç–∞–ª–∞ (—Å–∏–Ω–∏–π #1E5AFF, 0.3–º–º): X=[{min_x:.2f}, {max_x:.2f}], Y=[{min_y:.2f}, {max_y:.2f}]")


def parse_txt_polygon(path: str | Path) -> List[List[float]]:
    """–ü–∞—Ä—Å–∏—Ç TXT —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞"""
    p = Path(path)
    if not p.exists():
        return []
    coords: List[List[float]] = []
    for line in p.read_text(encoding='utf-8').splitlines():
        s = line.strip()
        if not s:
            continue
        parts = s.split(';') if ';' in s else s.split()
        if len(parts) < 3:
            continue
        try:
            x = float(str(parts[1]).replace(',', '.'))
            y = float(str(parts[2]).replace(',', '.'))
            coords.append([x, y])
        except Exception:
            continue
    if coords and coords[0] != coords[-1]:
        coords.append(coords[0])
    return coords


def parse_txt_boundary_points(
    path: str | Path, 
    operation: str = "CLARIFY",
    existing_parcel_xml: str | Path | None = None,
    tolerance: float = 0.01
) -> List[Dict[str, Any]]:
    """
    –ü–∞—Ä—Å–∏—Ç TXT —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç boundary_points —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
    
    –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—á–µ–∫ (—Å–æ–≥–ª–∞—Å–Ω–æ rules.md):
    
    –ü–†–ê–í–ò–õ–û 1 (–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏):
      –ï—Å–ª–∏ existing_parcel_xml –Ω–µ —É–∫–∞–∑–∞–Ω –ò–õ–ò –≤ XML –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:
      ‚Üí –í–°–ï —Ç–æ—á–∫–∏ CREATED (–Ω–æ–≤—ã–µ, –∫—Ä–∞—Å–Ω—ã–µ –∫—Ä—É–≥–∏ d=1.5–º–º, –ø—Ä–µ—Ñ–∏–∫—Å "–Ω")
      ‚Üí –í–°–ï –≥—Ä–∞–Ω–∏—Ü—ã –∫—Ä–∞—Å–Ω—ã–µ (–≤–Ω–æ–≤—å –æ–±—Ä–∞–∑—É–µ–º—ã–µ)
    
    –ü–†–ê–í–ò–õ–û 2 (–ù–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏):
      –ï—Å–ª–∏ existing_parcel_xml —É–∫–∞–∑–∞–Ω –ò –≤ XML –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:
      ‚Üí –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å tolerance (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.01–º)
      ‚Üí –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ—á–∫–∏ = EXISTING (—á–µ—Ä–Ω—ã–µ –∫—Ä—É–≥–∏ d=1.5–º–º)
      ‚Üí –ù–æ–≤—ã–µ —Ç–æ—á–∫–∏ = CREATED (–∫—Ä–∞—Å–Ω—ã–µ –∫—Ä—É–≥–∏, –ø—Ä–µ—Ñ–∏–∫—Å "–Ω")
      ‚Üí –ì—Ä–∞–Ω–∏—Ü–∞ –∫—Ä–∞—Å–Ω–∞—è –µ—Å–ª–∏ –•–û–¢–Ø –ë–´ –û–î–ù–ê —Ç–æ—á–∫–∞ –Ω–æ–≤–∞—è
    
    Args:
        path: –ü—É—Ç—å –∫ TXT —Ñ–∞–π–ª—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä;X;Y)
        operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        existing_parcel_xml: –ü—É—Ç—å –∫ XML –≤—ã–ø–∏—Å–∫–µ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        tolerance: –î–æ–ø—É—Å–∫ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–µ—Ç—Ä–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.01–º)
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –¥–ª—è boundary_points
    """
    p = Path(path)
    if not p.exists():
        return []
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ TXT
    txt_points: List[tuple] = []
    for line in p.read_text(encoding='utf-8').splitlines():
        s = line.strip()
        if not s:
            continue
        parts = s.split(';') if ';' in s else s.split()
        if len(parts) < 3:
            continue
        try:
            point_id = str(parts[0]).strip()
            x = float(str(parts[1]).replace(',', '.'))
            y = float(str(parts[2]).replace(',', '.'))
            txt_points.append((point_id, x, y))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ '{s}': {e}")
            continue
    
    if not txt_points:
        return []
    
    # –ü–∞—Ä—Å–∏–º XML —Å –∏—Å—Ö–æ–¥–Ω—ã–º —É—á–∞—Å—Ç–∫–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    existing_coords: List[tuple] = []
    if existing_parcel_xml:
        xml_path = Path(existing_parcel_xml)
        if xml_path.exists():
            try:
                import xml.etree.ElementTree as ET
                tree = ET.parse(xml_path)
                root = tree.getroot()
                
                # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä–∞–Ω–∏—Ü —É—á–∞—Å—Ç–∫–∞ –≤ XML
                # –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏: //Cadastre/EntitySpatial/SpatialElement/SpelementUnit/Ordinate
                ns = {'ns': root.tag.split('}')[0].strip('{')} if '}' in root.tag else {}
                
                for ordinate in root.findall('.//Ordinate', ns) or root.findall('.//{*}Ordinate'):
                    x_elem = ordinate.find('X', ns) or ordinate.find('{*}X')
                    y_elem = ordinate.find('Y', ns) or ordinate.find('{*}Y')
                    if x_elem is not None and y_elem is not None:
                        try:
                            x = float(x_elem.text.replace(',', '.'))
                            y = float(y_elem.text.replace(',', '.'))
                            existing_coords.append((x, y))
                        except (ValueError, AttributeError):
                            continue
                
                if existing_coords:
                    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(existing_coords)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫ –≤ XML –≤—ã–ø–∏—Å–∫–µ –Ω–∞ —É—á–∞—Å—Ç–æ–∫")
                else:
                    print(f"‚ö†Ô∏è –í XML –≤—ã–ø–∏—Å–∫–µ –Ω–∞ —É—á–∞—Å—Ç–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä–∞–Ω–∏—Ü")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –≤—ã–ø–∏—Å–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–æ–∫: {e}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ü—Ä–∞–≤–∏–ª–∞–º –∏–∑ rules.md
    points: List[Dict[str, Any]] = []
    
    for idx, (point_id, x, y) in enumerate(txt_points):
        # –ü–†–ê–í–ò–õ–û 1: –ï—Å–ª–∏ –Ω–µ—Ç XML –∏–ª–∏ –≤ XML –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - –≤—Å–µ —Ç–æ—á–∫–∏ –ù–û–í–´–ï
        if not existing_coords:
            kind = "CREATED"
        # –ü–†–ê–í–ò–õ–û 2: –ï—Å–ª–∏ –µ—Å—Ç—å XML —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        else:
            kind = "CREATED"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–≤–∞—è
            for ex_x, ex_y in existing_coords:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥–æ–ø—É—Å–∫–æ–º
                if abs(x - ex_x) <= tolerance and abs(y - ex_y) <= tolerance:
                    kind = "EXISTING"
                    break
        
        points.append({
            "id": f"bp{point_id}",
            "x": x,
            "y": y,
            "kind": kind,
            "number": point_id
        })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    existing_count = sum(1 for p in points if p['kind'] == 'EXISTING')
    created_count = sum(1 for p in points if p['kind'] == 'CREATED')
    print(f"üìç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ—á–µ–∫: {len(points)} (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {existing_count}, –Ω–æ–≤—ã—Ö: {created_count})")
    
    return points


def parse_cadastre_xml(path: str | Path, default_crs: Dict[str, Any] | None = None) -> SRZUData:
    p = Path(path)
    if not p.exists():
        raise FileNotFoundError(f"XML –Ω–µ –Ω–∞–π–¥–µ–Ω: {p}")
    tree = ET.parse(str(p))
    root = tree.getroot()

    crs = default_crs or {"name": "LOCAL", "unit": "m"}
    crs_el = root.find('crs')
    if crs_el is not None:
        crs = {"name": crs_el.get('name') or crs.get('name'), "unit": crs_el.get('unit') or crs.get('unit')}

    target_parcels: List[Geometry] = []
    adjacent_parcels: List[Geometry] = []
    quarters: List[Geometry] = []
    admin_boundaries: List[Geometry] = []
    zones: List[Geometry] = []
    labels: List[Dict[str, Any]] = []

    # –ö–≤–∞—Ä—Ç–∞–ª: –Ω–æ–º–µ—Ä –∏ —Å–±–æ—Ä –≤—Å–µ—Ö –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∫–∞–∫ —Å–º–µ–∂–Ω–∏–∫–æ–≤
    quarter_num = root.findtext('./cadastral_blocks/cadastral_block/cadastral_number')
    if quarter_num:
        print(f"üèòÔ∏è –ù–∞–π–¥–µ–Ω –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª: {quarter_num}")
        labels.append({"text": quarter_num, "x": 0.0, "y": 0.0, "kind": "quarter"})

    parcels_coords: List[List[List[float]]] = []
    for lr in root.findall('.//cadastral_blocks/cadastral_block/record_data/base_data/land_records/land_record'):
        poly = _polygon_from_spatial(lr.find('./contours_location/contours/contour'))
        if poly:
            parcels_coords.append(poly)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞
            cad_number = lr.findtext('./object/common_data/cad_number')
            
            adjacent_parcels.append({
                "type": "Polygon", "coordinates": [poly],
                "properties": {
                    "status": "EXISTING", 
                    "color": "#808080",
                    "cad_number": cad_number
                }
            })
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —É—á–∞—Å—Ç–∫–∞ (–ø–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É)
            if cad_number and poly:
                cx, cy = _polygon_centroid(poly)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä: —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–≤–∞—Ä—Ç–∞–ª–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å)
                short_number = cad_number.split(':')[-1] if ':' in cad_number else cad_number
                labels.append({
                    "text": f":{short_number}",
                    "x": cx,
                    "y": cy,
                    "kind": "parcel_label",
                    "full_number": cad_number
                })

    # –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–µ–∫—Ü–∏–∏ cadastral_block
    direct_quarter = _extract_quarter_coords_from_block(root)
    if direct_quarter:
        quarters.append({
            "type": "LineString",
            "coordinates": direct_quarter,
            "properties": {
                "color": "#1E5AFF",
                "stroke-width": "0.3mm",
                "quarter_number": quarter_num or "unknown",
                "source": "xml:cadastral_block"
            }
        })
        print("‚úÖ –ì—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ XML (cadastral_block)")
    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –Ω–µ—Ç ‚Äî —Å—Ç—Ä–æ–∏–º –≤–Ω–µ—à–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    # (—Å—Ç—Ä–æ–≥–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º: –ø–æ –≤–Ω–µ—à–Ω–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º –≤—Å–µ—Ö –ó–£)
    elif parcels_coords:
        print(f"üèòÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–≤–∞—Ä—Ç–∞–ª–∞ –∏–∑ {len(parcels_coords)} —É—á–∞—Å—Ç–∫–æ–≤")
        print(f"üìã –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º: –≥—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ –≤–Ω–µ—à–Ω–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º –≤—Å–µ—Ö –ó–£ –≤ –∫–≤–∞—Ä—Ç–∞–ª–µ")
        
        if Polygon is not None and unary_union is not None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º shapely –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã
            polys = []
            for ring in parcels_coords:
                try:
                    polys.append(Polygon(ring))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
                    continue
            
            if polys:
                try:
                    u = unary_union(polys)
                    if hasattr(u, 'geoms'):
                        # MultiPolygon - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
                        for i, geom in enumerate(u.geoms):
                            ext = list(geom.exterior.coords)
                            quarters.append({
                                "type": "LineString",
                                "coordinates": [[float(x), float(y)] for x, y in ext],
                                "properties": {
                                    "color": "#1E5AFF",  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
                                    "stroke-width": "0.3mm",  # –¢–æ–ª—â–∏–Ω–∞ 0.3–º–º —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
                                    "quarter_number": quarter_num or "unknown",
                                    "part": i + 1
                                }
                            })
                        print(f"‚úÖ –ì—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–∑ {len(u.geoms)} —á–∞—Å—Ç–µ–π (—Å–∏–Ω–∏–π #1E5AFF, 0.3–º–º)")
                    else:
                        # Single Polygon
                        ext = list(u.exterior.coords)
                        quarters.append({
                            "type": "LineString",
                            "coordinates": [[float(x), float(y)] for x, y in ext],
                            "properties": {
                                "color": "#1E5AFF",  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
                                "stroke-width": "0.3mm",  # –¢–æ–ª—â–∏–Ω–∞ 0.3–º–º —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
                                "quarter_number": quarter_num or "unknown"
                            }
                        })
                        print(f"‚úÖ –ì—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ –µ–¥–∏–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω (—Å–∏–Ω–∏–π #1E5AFF, 0.3–º–º)")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {e}")
                    # Fallback –∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–º—É —ç–∫—Å—Ç–µ–Ω—Ç—É
                    _add_rectangular_quarter(parcels_coords, quarters, quarter_num)
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
                _add_rectangular_quarter(parcels_coords, quarters, quarter_num)
        else:
            # Fallback ‚Äî –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —ç–∫—Å—Ç–µ–Ω—Ç
            print("‚ö†Ô∏è Shapely –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —ç–∫—Å—Ç–µ–Ω—Ç")
            _add_rectangular_quarter(parcels_coords, quarters, quarter_num)

    return {
        "crs": crs,
        "target_parcels": target_parcels,
        "adjacent_parcels": adjacent_parcels,
        "quarters": quarters,
        "admin_boundaries": admin_boundaries,
        "zones": zones,
        "labels": labels,
        # –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–∞—Å—à—Ç–∞–±—ã –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å –∏–∑ XML –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
        "allowed_scales": [1000, 500, 2000, 5000],
        "buffer_m": 200
    }


